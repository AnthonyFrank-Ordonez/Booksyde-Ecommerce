
generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id      Int    @id @default(autoincrement())
  comment String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Address {
  id             Int @id @default(autoincrement())
  houseNo        Int
  street         String
  city           String
  province       String
  country        String
  postal         Int
  defaultAddress Boolean
  userId         String
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

model User {
  id            String    @id
  createdAt     DateTime
  updatedAt     DateTime
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  accounts      Account[]
  comment       Comment[]
  sessions      Session[]
  address       Address[]

  @@map("users")
}

model Session {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id
  createdAt             DateTime
  updatedAt             DateTime
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String    @id
  createdAt  DateTime?
  updatedAt  DateTime?
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  author      String
  genres      String[]
  price       Decimal
  description String
  rating      Decimal
  coverImg    String
  language    String
  slug        String @unique 

  @@map("books")
}

model RateLimit {
  id          String  @id
  key         String?
  count       Int?
  lastRequest BigInt?

  @@map("rateLimit")
}
