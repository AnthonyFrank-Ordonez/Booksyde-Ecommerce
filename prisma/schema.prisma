
generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ItemType {
  BOOK
  MANGA
  NOVEL
}

model Review {
  id        String    @id @default(cuid())
  content   String
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookId    String?
  book      Book? @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Address {
  id             String @id @default(cuid())
  houseNo        Int
  street         String
  city           String
  province       String
  country        String
  postal         Int
  defaultAddress Boolean

  userId         String
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

model User {
  id            String    @id
  createdAt     DateTime
  updatedAt     DateTime
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  firstName     String?
  lastName      String?
  phone         String?

  accounts      Account[]
  comments      Review[]
  sessions      Session[]
  address       Address[]
  cart          Cart?
  wishlist      Wishlist?

  @@map("users")
}

model Session {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id
  createdAt             DateTime
  updatedAt             DateTime
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String    @id
  createdAt  DateTime?
  updatedAt  DateTime?
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Book {
  id           String      @id @default(cuid())
  title        String
  author       String
  genres       String[]
  price        Decimal     @db.Decimal(10, 2)
  description  String
  rating       Decimal     @db.Decimal(10, 2)
  coverImg     String
  language     String
  slug         String @unique 

  comments     Review[]
  cartItem     CartItem[]
  wishlistItem WishlistItems[]

  @@map("books")
}

model RateLimit {
  id          String  @id
  key         String?
  count       Int?
  lastRequest BigInt?

  @@map("rateLimit")
}

model Cart {
  id        String    @id @default(cuid())

  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())

  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  quantity  Int     @default(1)

  itemType  ItemType
  itemId    String

  // Direct Relations
  bookId    String?
  mangaId   String?
  novelId   String?

  book      Book?   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // For Perfomance
  @@index([cartId])                    // For cart queries
  @@index([cartId, itemType, itemId]) // For duplicate checking
  @@index([itemType, itemId])         // For item-specific queries

  // Prevent duplicate items in the same cart
  @@unique([cartId, itemType, itemId])

  @@map("cart_items")
}

model Wishlist {
  id        String @id @default(cuid())

  userId    String @unique
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wishlists WishlistItems[]

  @@map("wishlists")
}

model WishlistItems {
  id         String @id @default(cuid())

  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  itemType   ItemType
  itemId     String

  // Direct Relations
  bookId     String?
  mangaId    String?
  novelId    String?

  book       Book?   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt

    // For Perfomance
  @@index([wishlistId])                    // For cart queries
  @@index([wishlistId, itemType, itemId]) // For duplicate checking
  @@index([itemType, itemId])             // For item-specific queries

  // Prevent duplicate items in the same cart
  @@unique([wishlistId, itemType, itemId])

  @@map("wishlist_items")
}